# coding: utf-8

"""
    Book Store API

    Book Store Web API

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union

from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class BookModal(BaseModel):
    """
    
    """  # noqa: E501
    isbn: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    sub_title: Optional[StrictStr] = Field(default=None, alias="subTitle")
    author: Optional[StrictStr] = None
    publish_date: Optional[datetime] = None
    publisher: Optional[StrictStr] = None
    pages: Optional[Union[StrictFloat, StrictInt]] = None
    description: Optional[StrictStr] = None
    website: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["isbn", "title", "subTitle", "author", "publish_date", "publisher", "pages",
                                         "description", "website"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of BookModal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of BookModal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "isbn": obj.get("isbn"),
            "title": obj.get("title"),
            "subTitle": obj.get("subTitle"),
            "author": obj.get("author"),
            "publish_date": obj.get("publish_date"),
            "publisher": obj.get("publisher"),
            "pages": obj.get("pages"),
            "description": obj.get("description"),
            "website": obj.get("website")
        })
        return _obj
